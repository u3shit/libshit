diff --git a/include/clang-c/Index.h b/include/clang-c/Index.h
index 65dada38b05..1eb029bb783 100644
--- a/include/clang-c/Index.h
+++ b/include/clang-c/Index.h
@@ -3619,6 +3619,22 @@ CINDEX_LINKAGE int clang_getExceptionSpecificationType(CXType T);
  */
 CINDEX_LINKAGE int clang_getNumArgTypes(CXType T);
 
+/**
+ * \brief Return 1 if the CXType is a final class type, and 0 otherwise.
+ */
+CINDEX_LINKAGE unsigned clang_isFinalType(CXType T);
+
+/**
+ * \bried Return 1 if the CXType is an abstract class type, and 0 otherwise.
+ */
+CINDEX_LINKAGE unsigned clang_isAbstractType(CXType T);
+
+/**
+ * \brief Return 1 if the CXType is a noexcept C++ function or method pointer,
+ * and 0 otherwise.
+ */
+CINDEX_LINKAGE unsigned clang_isNoexcept(CXType C);
+
 /**
  * Retrieve the type of a parameter of a function type.
  *
@@ -4418,6 +4434,12 @@ CINDEX_LINKAGE CXString clang_Cursor_getRawCommentText(CXCursor C);
  */
 CINDEX_LINKAGE CXString clang_Cursor_getBriefCommentText(CXCursor C);
 
+/**
+ * \brief Determine if a C++ function or method has been deleted with
+ * '= delete'.
+ */
+CINDEX_LINKAGE unsigned clang_CXX_isDeleted(CXCursor C);
+
 /**
  * @}
  */
@@ -4476,6 +4498,12 @@ CINDEX_LINKAGE CXModule clang_getModuleForFile(CXTranslationUnit, CXFile);
  */
 CINDEX_LINKAGE CXFile clang_Module_getASTFile(CXModule Module);
 
+/**
+ * \brief Determine if a C++ member function or member function template method
+ * overrides a virtual method from one of the base classes.
+ */
+CINDEX_LINKAGE unsigned clang_CXXMethod_isOverride(CXCursor C);
+
 /**
  * \param Module a module object.
  *
diff --git a/include/clang/Basic/Attr.td b/include/clang/Basic/Attr.td
index dc9edace50d..715eaaa48b0 100644
--- a/include/clang/Basic/Attr.td
+++ b/include/clang/Basic/Attr.td
@@ -667,6 +667,7 @@ def Annotate : InheritableParamAttr {
   // '#pragma clang attribute' even though it has no subject list.
   let ForcePragmaAttributeSupport = 1;
   let Documentation = [Undocumented];
+  let InheritEvenIfAlreadyPresent = 1;
 }
 
 def ARMInterrupt : InheritableAttr, TargetSpecificAttr<TargetARM> {
diff --git a/tools/libclang/CIndex.cpp b/tools/libclang/CIndex.cpp
index 499d9abf9a8..bc0a265b924 100644
--- a/tools/libclang/CIndex.cpp
+++ b/tools/libclang/CIndex.cpp
@@ -712,12 +712,12 @@ bool CursorVisitor::VisitClassTemplateSpecializationDecl(
   case TSK_Undeclared:
   case TSK_ImplicitInstantiation:
     // Nothing to visit
-    return false;
-      
+    // return false;
+
   case TSK_ExplicitInstantiationDeclaration:
   case TSK_ExplicitInstantiationDefinition:
-    break;
-      
+    // break;
+
   case TSK_ExplicitSpecialization:
     ShouldVisitBody = true;
     break;
@@ -942,9 +942,16 @@ bool CursorVisitor::VisitClassTemplateDecl(ClassTemplateDecl *D) {
   // before visiting these template parameters.
   if (VisitTemplateParameters(D->getTemplateParameters()))
     return true;
-  
+
   auto* CD = D->getTemplatedDecl();
-  return VisitAttributes(CD) || VisitCXXRecordDecl(CD);
+  if (VisitAttributes(CD) || VisitCXXRecordDecl(CD))
+    return true;
+
+  for (auto DIt = D->spec_begin(), DE = D->spec_end(); DIt != DE; ++DIt)
+    if (Visit(MakeCXCursor(*DIt, TU)))
+      return true;
+
+  return false;
 }
 
 bool CursorVisitor::VisitTemplateTemplateParmDecl(TemplateTemplateParmDecl *D) {
@@ -8091,6 +8098,15 @@ CXFile clang_Module_getTopLevelHeader(CXTranslationUnit TU,
 // C++ AST instrospection.
 //===----------------------------------------------------------------------===//
 
+unsigned clang_CXX_isDeleted(CXCursor C) {
+  if (!clang_isDeclaration(C.kind))
+    return 0;
+
+  const Decl *D = cxcursor::getCursorDecl(C);
+  const FunctionDecl *Function = D->getAsFunction();
+  return (Function && Function->isDeleted()) ? 1 : 0;
+}
+
 unsigned clang_CXXConstructor_isDefaultConstructor(CXCursor C) {
   if (!clang_isDeclaration(C.kind))
     return 0;
@@ -8212,6 +8228,16 @@ unsigned clang_EnumDecl_isScoped(CXCursor C) {
   return (Enum && Enum->isScoped()) ? 1 : 0;
 }
 
+unsigned clang_CXXMethod_isOverride(CXCursor C) {
+  if (!clang_isDeclaration(C.kind))
+    return 0;
+
+  const Decl *D = cxcursor::getCursorDecl(C);
+  const CXXMethodDecl *Method =
+      D ? dyn_cast_or_null<CXXMethodDecl>(D->getAsFunction()) : nullptr;
+  return (Method && Method->size_overridden_methods()) ? 1 : 0;
+}
+
 //===----------------------------------------------------------------------===//
 // Attribute introspection.
 //===----------------------------------------------------------------------===//
diff --git a/tools/libclang/CXType.cpp b/tools/libclang/CXType.cpp
index 7c0f307944a..9f1a8e679bb 100644
--- a/tools/libclang/CXType.cpp
+++ b/tools/libclang/CXType.cpp
@@ -761,6 +761,42 @@ unsigned clang_isPODType(CXType X) {
   return T.isPODType(cxtu::getASTUnit(TU)->getASTContext()) ? 1 : 0;
 }
 
+unsigned clang_isFinalType(CXType X) {
+  QualType T = GetQualType(X);
+  if (T.isNull())
+    return 0;
+
+  const CXXRecordDecl *RecordDecl = T->getAsCXXRecordDecl();
+  if (!RecordDecl)
+    return 0;
+
+  return RecordDecl->getAttr<FinalAttr>() ? 1 : 0;
+}
+
+unsigned clang_isAbstractType(CXType X) {
+  QualType T = GetQualType(X);
+  if (T.isNull())
+    return 0;
+
+  const CXXRecordDecl *RecordDecl = T->getAsCXXRecordDecl();
+  if (!RecordDecl)
+    return 0;
+
+  return RecordDecl->isAbstract() ? 1 : 0;
+}
+
+unsigned clang_isNoexcept(CXType X) {
+  QualType T = GetQualType(X);
+  if (T.isNull())
+    return 0;
+
+  const FunctionProtoType *Proto = T->getAs<FunctionProtoType>();
+  if (!Proto)
+    return 0;
+
+  return Proto->hasNoexceptExceptionSpec() ? 1 : 0;
+}
+
 CXType clang_getElementType(CXType CT) {
   QualType ET = QualType();
   QualType T = GetQualType(CT);
diff --git a/tools/libclang/libclang.exports b/tools/libclang/libclang.exports
index 95a42712c4a..242d9ceb529 100644
--- a/tools/libclang/libclang.exports
+++ b/tools/libclang/libclang.exports
@@ -3,6 +3,7 @@ clang_CXCursorSet_insert
 clang_CXIndex_getGlobalOptions
 clang_CXIndex_setGlobalOptions
 clang_CXIndex_setInvocationEmissionPathOption
+clang_CXX_isDeleted
 clang_CXXConstructor_isConvertingConstructor
 clang_CXXConstructor_isCopyConstructor
 clang_CXXConstructor_isDefaultConstructor
@@ -14,6 +15,7 @@ clang_CXXMethod_isPureVirtual
 clang_CXXMethod_isStatic
 clang_CXXMethod_isVirtual
 clang_CXXRecord_isAbstract
+clang_CXXMethod_isOverride
 clang_EnumDecl_isScoped
 clang_Cursor_getArgument
 clang_Cursor_getNumTemplateArguments
@@ -303,6 +305,9 @@ clang_isFileMultipleIncludeGuarded
 clang_isFunctionTypeVariadic
 clang_isInvalid
 clang_isPODType
+clang_isFinalType
+clang_isAbstractType
+clang_isNoexcept
 clang_isPreprocessing
 clang_isReference
 clang_isRestrictQualifiedType
