# -*- mode: python -*-

def options(ctx):
    ctx.load('boost')
    ctx.system_opt('boost')

from waflib import Context
def configure(ctx):
    def system_boost(ctx):
        ctx.check_boost(lib=getattr(Context.g_module, 'BOOST_LIBS', []))
    def bundle_boost(ctx):
        if not ctx.path.find_node('boost/boost/filesystem.hpp'):
            ctx.fatal('No boost source at libshit/ext/boost')

        ctx.env['INCLUDES_BOOST'] = ctx.path.find_node('boost').abspath()

        # change boost includes to -isystem, because they can produce a lot of junk
        if ctx.env['INCLUDES_BOOST']:
            if ctx.check_cxx(cxxflags=['-isystem', '.'],
                             features='cxx', mandatory=False,
                             msg='Checking for compiler flag -isystem'):
                flag = '-isystem'
            elif ctx.check_cxx(cxxflags=['-imsvc', '.'],
                               features='cxx', mandatory=False,
                               msg='Checking for compiler flag -imsvc'):
                flag = '-imsvc'
            else:
                return

            ctx.env.append_value('CXXFLAGS_BOOST', [flag, ctx.env['INCLUDES_BOOST']])
            del ctx.env['INCLUDES_BOOST']
    ctx.system_chk('boost', 'auto', system_boost, bundle_boost)

def build(ctx):
    if not ctx.env.BUILD_BOOST: return

    boost_libs = set(getattr(Context.g_module, 'BOOST_LIBS', []))
    if 'system' in boost_libs:
        boost_libs.remove('system')

        ctx.stlib(source  = 'boost/libs/system/src/error_code.cpp',
                  defines = 'BOOST_SYSTEM_STATIC_LINK=1',
                  target  = 'boost_system',
                  uselib  = 'BOOST EXT') # get proper includes

    if 'filesystem' in boost_libs:
        boost_libs.remove('filesystem')

        fs_src = [
            'boost/libs/filesystem/src/codecvt_error_category.cpp',
            'boost/libs/filesystem/src/operations.cpp',
            'boost/libs/filesystem/src/path.cpp',
            'boost/libs/filesystem/src/path_traits.cpp',
            'boost/libs/filesystem/src/portability.cpp',
            'boost/libs/filesystem/src/unique_path.cpp',
            'boost/libs/filesystem/src/utf8_codecvt_facet.cpp',
            'boost/libs/filesystem/src/windows_file_codecvt.cpp',
        ]
        ctx.stlib(source  = fs_src,
                  defines = 'BOOST_FILESYSTEM_STATIC_LINK=1',
                  target  = 'boost_filesystem',
                  uselib  = 'BOOST EXT') # get proper includes

    if boost_libs: # empty set is false
        ctx.fatal("Unhandled boost libs: %s" % boost_libs)
