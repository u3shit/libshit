# -*- yaml -*-

# boost
- ref: "iwyu_boost_pp.imp"
- include: ['@<boost/config/.*>', private, '<boost/config.hpp>', public]
- include: ['<boost/smart_ptr/detail/operator_bool.hpp>', private,
            '<boost/smart_ptr/intrusive_ptr.hpp>', public]
- symbol: ['boost::endian::align', private,
           '<boost/endian/arithmetic.hpp>', public]
- symbol: ['boost::endian::order', private,
           '<boost/endian/arithmetic.hpp>', public]

- include: ['<boost/container/vector.hpp>', public,
            '<boost/container/static_vector.hpp>', public]
- include: ['<boost/container/vector.hpp>', public,
            '<boost/container/small_vector.hpp>', public]
- include: ['<boost/intrusive/detail/reverse_iterator.hpp>', private,
            '<boost/intrusive/bstree.hpp>', public]
- include: ['<boost/intrusive/detail/reverse_iterator.hpp>', private,
            '<boost/intrusive/list.hpp>', public]
- include: ['<boost/intrusive/detail/reverse_iterator.hpp>', private,
            '<boost/container/flat_map.hpp>', public]
- include: ['<boost/container/vector.hpp>', public,
            '<boost/container/flat_map.hpp>', public]

- include: ['@<boost/spirit/home/x3/.*>', public,
            '<boost/spirit/home/x3.hpp>', public]
- include: ['<boost/spirit/home/support/char_encoding/standard.hpp>', public,
            '<boost/spirit/home/x3.hpp>', public]

- include: ['<boost/iterator/iterator_traits.hpp>', public,
            '<boost/algorithm/string/replace.hpp>', public]

- include: ['@<boost/stacktrace/.*>', private,
            '<boost/stacktrace.hpp>', public]

- include: ['<boost/algorithm/string/detail/finder.hpp>', private,
            '<boost/algorithm/string/finder.hpp>', public]
- include: ['<boost/iterator/iterator_facade.hpp>', public,
            '<boost/algorithm/string/find_iterator.hpp>', public]
- include: ['<boost/iterator/transform_iterator.hpp>', public,
            '<boost/algorithm/string/case_conv.hpp>', public]
- include: ['<boost/iterator/transform_iterator.hpp>', public,
            '<boost/algorithm/string/iter_find.hpp>', public]
- include: ['<boost/algorithm/string/compare.hpp>', public,
           '<boost/algorithm/string/find.hpp>', public]
- include: ['<boost/algorithm/string/compare.hpp>', public,
           '<boost/algorithm/string/replace.hpp>', public]
- include: ['<boost/algorithm/string/compare.hpp>', public,
           '<boost/algorithm/string/predicate.hpp>', public]
- include: ['<boost/algorithm/string/compare.hpp>', public,
           '<boost/algorithm/string/split.hpp>', public]
- include: ['<boost/algorithm/string/compare.hpp>', public,
           '<boost/algorithm/string/finder.hpp>', public]

- include: ['@<boost/fusion/adapted/struct/detail/.*>', private,
            '<boost/fusion/adapted/struct/adapt_struct.hpp>', public]
- include: ['@<boost/fusion/adapted/struct/detail/.*>', private,
            '<boost/fusion/adapted/struct/adapt_struct_named.hpp>', public]

- symbol: ['boost::mp11::mp_append', private, '<boost/mp11/list.hpp>', public]
- symbol: ['boost::mp11::mp_fold', private, '<boost/mp11/algorithm.hpp>', public]
- symbol: ['boost::mp11::mp_list', private, '<boost/mp11/list.hpp>', public]

# token_functions errors if I directly include it
- include: ['<boost/token_functions.hpp>', private,
            '<boost/tokenizer.hpp>', public]

# lua
- include: ['<lua.h>', private, '<lua.hpp>', public]
- include: ['<lauxlib.h>', private, '<lua.hpp>', public]
- include: ['<lualib.h>', private, '<lua.hpp>', public]

# doctest
- include: ['<doctest.h>', private, '<libshit/doctest.hpp>', public]

# tracy
- include: ['<common/TracyColor.hpp>', private, '<Tracy.hpp>', public]
- include: ['<common/TracySystem.hpp>', private, '<Tracy.hpp>', public]

# stl/libc++
- include: ['<exception>', public, '<stdexcept>', public]
- include: ['<__tuple>', private, '<tuple>', public]
- symbol: ['std::errc', private, '<system_error>', public]
- symbol: ['std::errc', private, '<charconv>', public]
# don't require #include <utility> when a map should already include it...
- symbol: ['std::pair', private, '<utility>', public]
- symbol: ['std::pair', private, '<map>', public]
- symbol: ['std::pair', private, '<unordered_map>', public]

- symbol: ['std::basic_ostream', private, '<iosfwd>', public]
- symbol: ['std::basic_ostream', private, '<ostream>', public]
- symbol: ['std::basic_ostream', private, '<iostream>', public]

- symbol: ['std::swap', private, '<algorithm>', public]
- symbol: ['std::swap', private, '<utility>', public]

- symbol: ['std::size', private, '<array>', public]
- symbol: ['std::size', private, '<deque>', public]
- symbol: ['std::size', private, '<forward_list>', public]
- symbol: ['std::size', private, '<iterator>', public]
- symbol: ['std::size', private, '<list>', public]
- symbol: ['std::size', private, '<map>', public]
- symbol: ['std::size', private, '<regex>', public]
- symbol: ['std::size', private, '<set>', public]
- symbol: ['std::size', private, '<span>', public]
- symbol: ['std::size', private, '<string>', public]
- symbol: ['std::size', private, '<string_view>', public]
- symbol: ['std::size', private, '<unordered_map>', public]
- symbol: ['std::size', private, '<unordered_set>', public]
- symbol: ['std::size', private, '<vector>', public]

- symbol: ['std::size_t', private, '<cstddef>', public]
- symbol: ['std::size_t', private, '<cstdio>', public]
- symbol: ['std::size_t', private, '<cstdlib>', public]
- symbol: ['std::size_t', private, '<cstring>', public]
- symbol: ['std::size_t', private, '<ctime>', public]
- symbol: ['std::size_t', private, '<cuchar>', public]
- symbol: ['std::size_t', private, '<cwchar>', public]

# don't include <ratio> just because chrono typedefs happen to use it...
- symbol: ['std::ratio', private, '<ratio>', public]
- symbol: ['std::ratio', private, '<chrono>', public]

# _LIBCPP_VERSION is automatically defined when you include "one of the standard header files"
- symbol: [_LIBCPP_VERSION, private, '<cstddef>', public]

- symbol: [int8_t, private, '<cstdint>', public]
- symbol: [uint8_t, private, '<cstdint>', public]
- symbol: [int16_t, private, '<cstdint>', public]
- symbol: [uint16_t, private, '<cstdint>', public]
- symbol: [int32_t, private, '<cstdint>', public]
- symbol: [uint32_t, private, '<cstdint>', public]
- symbol: [int64_t, private, '<cstdint>', public]
- symbol: [uint64_t, private, '<cstdint>', public]

# from standard libcxx.imp
- include: ['<__functional_base>', private, '<functional>', public ]
- include: ['<__mutex_base>', private, '<mutex>', public ]
- symbol: [ 'std::declval', private, '<utility>', public ]
- symbol: [ 'std::forward', private, '<utility>', public ]
- symbol: [ 'std::move', private, '<utility>', public ]
- symbol: [ 'std::nullptr_t', private, '<cstddef>', public ]
- symbol: [ 'std::string', private, '<string>', public ]

# glibc (old versions)
- symbol: ['strncasecmp', private, '<strings.h>', public]
- symbol: ['strcasecmp', private, '<strings.h>', public]
