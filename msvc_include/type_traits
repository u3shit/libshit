// -*- c++ -*-
#pragma once

#include_next <type_traits>

namespace std
{

  template <bool X>
  using bool_constant = integral_constant<bool, X>;

  template <typename T>
  struct is_null_pointer : is_same<nullptr_t, remove_cv_t<T>> {};

  template <typename T>
  struct is_final : bool_constant<__is_final(T)> {};

  // copy-paste from
  // http://en.cppreference.com/w/cpp/experimental/type_trait_variable_templates
  template <class T> constexpr bool is_void_v = is_void<T>::value;
  template <class T> constexpr bool is_null_pointer_v = is_null_pointer<T>::value;
  template <class T> constexpr bool is_integral_v = is_integral<T>::value;
  template <class T> constexpr bool is_floating_point_v = is_floating_point<T>::value;
  template <class T> constexpr bool is_array_v = is_array<T>::value;
  template <class T> constexpr bool is_pointer_v = is_pointer<T>::value;
  template <class T> constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;
  template <class T> constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;
  template <class T> constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;
  template <class T> constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;
  template <class T> constexpr bool is_enum_v = is_enum<T>::value;
  template <class T> constexpr bool is_union_v = is_union<T>::value;
  template <class T> constexpr bool is_class_v = is_class<T>::value;
  template <class T> constexpr bool is_function_v = is_function<T>::value;

  template <class T> constexpr bool is_reference_v = is_reference<T>::value;
  template <class T> constexpr bool is_arithmetic_v = is_arithmetic<T>::value;
  template <class T> constexpr bool is_fundamental_v = is_fundamental<T>::value;
  template <class T> constexpr bool is_object_v = is_object<T>::value;
  template <class T> constexpr bool is_scalar_v = is_scalar<T>::value;
  template <class T> constexpr bool is_compound_v = is_compound<T>::value;
  template <class T> constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

  template <class T> constexpr bool is_const_v = is_const<T>::value;
  template <class T> constexpr bool is_volatile_v = is_volatile<T>::value;
  template <class T> constexpr bool is_trivial_v = is_trivial<T>::value;
  template <class T> constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;
  template <class T> constexpr bool is_standard_layout_v = is_standard_layout<T>::value;
  template <class T> constexpr bool is_pod_v = is_pod<T>::value;
  template <class T> constexpr bool is_literal_type_v = is_literal_type<T>::value;
  template <class T> constexpr bool is_empty_v = is_empty<T>::value;
  template <class T> constexpr bool is_polymorphic_v = is_polymorphic<T>::value;
  template <class T> constexpr bool is_abstract_v = is_abstract<T>::value;
  template <class T> constexpr bool is_final_v = is_final<T>::value;
  template <class T> constexpr bool is_signed_v = is_signed<T>::value;
  template <class T> constexpr bool is_unsigned_v = is_unsigned<T>::value;

  template <class T, class... Args> constexpr bool is_constructible_v = is_constructible<T, Args...>::value;
  template <class T, class... Args> constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;
  template <class T, class... Args> constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;
  template <class T> constexpr bool is_default_constructible_v = is_default_constructible<T>::value;
  template <class T> constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;
  template <class T> constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;
  template <class T> constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;
  template <class T> constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;
  template <class T> constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<T>::value;
  template <class T> constexpr bool is_move_constructible_v = is_move_constructible<T>::value;
  template <class T> constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;
  template <class T> constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<T>::value;
  template <class T, class U> constexpr bool is_assignable_v = is_assignable<T, U>::value;
  template <class T, class U> constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;
  template <class T, class U> constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<T, U>::value;
  template <class T> constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;
  template <class T> constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;
  template <class T> constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;
  template <class T> constexpr bool is_move_assignable_v = is_move_assignable<T>::value;
  template <class T> constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;
  template <class T> constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;
  template <class T> constexpr bool is_destructible_v = is_destructible<T>::value;
  template <class T> constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;
  template <class T> constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<T>::value;
  template <class T> constexpr bool has_virtual_destructor_v = has_virtual_destructor<T>::value;

  template <class T> constexpr size_t alignment_of_v = alignment_of<T>::value;
  template <class T> constexpr size_t rank_v = rank<T>::value;
  template <class T, unsigned I = 0> constexpr size_t extent_v = extent<T, I>::value;

  template <class T, class U> constexpr bool is_same_v = is_same<T, U>::value;
  template <class Base, class Derived> constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;
  template <class From, class To> constexpr bool is_convertible_v = is_convertible<From, To>::value;


  template <typename... T>
  using void_t = void;

}
